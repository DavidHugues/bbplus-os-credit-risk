{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.8", "generated_at": "2024-12-16T19:19:27.543335Z", "invocation_id": "ff6245b6-661b-4c65-b734-deeac7955056", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-16T19:18:38.098520Z", "completed_at": "2024-12-16T19:18:38.108843Z"}, {"name": "execute", "started_at": "2024-12-16T19:18:38.110534Z", "completed_at": "2024-12-16T19:19:25.998188Z"}], "thread_id": "Thread-1", "execution_time": 47.9040150642395, "adapter_response": {"_message": "CREATE TABLE (3.4m rows, 485.9 MiB processed)", "code": "CREATE TABLE", "rows_affected": 3352042, "bytes_processed": 509510384, "bytes_billed": 509607936, "location": "EU", "project_id": "steam-outlet-209412", "job_id": "a34be21e-9332-4d34-8ac2-e7aacf661df6", "slot_ms": 5151644}, "message": "CREATE TABLE (3.4m rows, 485.9 MiB processed)", "failures": null, "unique_id": "model.creditrisk.accounts_history_advanced", "compiled": true, "compiled_code": "/*\n    This transformations is generating the second version of the core dataset (advanced version)\n    The main complexity lies in the fact that SQL is not sufficient to calculate the linearized payments. \n    We thus need to use a User Defined Function (here in Javascript) - but we could also use another programming language. \n*/\n\n\n\nWITH accounts_history as (\n    SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`accounts_history_beginner`\n),\n\nadditional_kpis as (\n    SELECT \n        *,\n        \n        CASE \n            WHEN reporting_day <= down_payment_days_included THEN Null\n            WHEN reporting_day = down_payment_days_included + 1 THEN paid_total\n            ELSE amount_excl_dp\n        END as amount_excl_dp_period, -- This step is necessary to 'record' payments at the end of the downpayment period.\n\n        CASE  \n            WHEN reporting_day < down_payment_days_included THEN Null\n            WHEN reporting_day >= down_payment_days_included THEN reporting_day - down_payment_days_included\n        END as reporting_day_excl_dp, -- Necessary to remove the downpayment period from analyses\n\n    FROM accounts_history\n),\n\n-- Preparing the data for the UDF (consuming arrays)\nprepared_for_udf as (\n    SELECT\n        account_id,\n        ARRAY_AGG(COALESCE(amount_excl_dp_period, 0)     ORDER BY reporting_day) as payment_amounts,\n        ARRAY_AGG(daily_rate                             ORDER BY reporting_day) as daily_rates,\n        ARRAY_AGG(CAST(DATE(reporting_date) as STRING)   ORDER BY reporting_day) as casted_reporting_dates,\n    FROM additional_kpis\n    GROUP BY ALL\n),\n\n-- applying the UDF on prepared data format\napply_udf AS (\n    SELECT \n        *,\n        oscreditrisk.payment_linearization(\n        prepared_for_udf.payment_amounts, \n        prepared_for_udf.daily_rates, \n        prepared_for_udf.casted_reporting_dates\n        ) as payment_amount_lin_excl_dp\n    FROM prepared_for_udf\n),\n\n-- Expanding the results before joining them back\nexpand_udf_result AS (\n    SELECT\n        account_id,\n        CAST(reporting_date AS TIMESTAMP) as reporting_date,\n        amount_lin\n    FROM\n        apply_udf,\n        UNNEST(apply_udf.casted_reporting_dates)            AS reporting_date   WITH OFFSET AS pos\n    JOIN UNNEST(apply_udf.payment_amount_lin_excl_dp)     AS amount_lin       WITH OFFSET AS val_pos\n    ON pos = val_pos\n),\n\njoin_back_on_dataset as (\n    SELECT \n        *,\n        SUM(amount_lin) OVER(PARTITION BY account_id ORDER BY reporting_day ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as paid_total_lin,\n        IF(\n            amount_lin = 0 AND LAG(amount_lin) OVER(PARTITION BY account_id ORDER BY reporting_day) > 0,\n            reporting_date,\n            Null\n        ) as last_disablement,\n    FROM additional_kpis \n    LEFT JOIN expand_udf_result USING(account_id, reporting_date)\n),\n\n-- As a last step, use this information to calculate useful fields: status and number of days disabled.\nfinal_kpis as (\n  SELECT \n    *,\n    CASE \n        WHEN reporting_day <= down_payment_days_included THEN 'ENABLED'\n        WHEN paid_total >= unlock_price THEN 'UNLOCKED'\n        WHEN amount_lin > 0   THEN 'ENABLED'\n        WHEN amount_lin <= 0  THEN 'DISABLED'\n    END as reporting_date_status,\n    CASE \n        WHEN amount_lin = 0 \n        THEN DATE_DIFF(\n            reporting_date, \n            LAST_VALUE(last_disablement IGNORE NULLS) OVER(PARTITION BY account_id ORDER BY reporting_day),\n            DAY\n        ) \n    END as days_disabled,\n  FROM join_back_on_dataset\n)\n\nSELECT * FROM final_kpis", "relation_name": "`steam-outlet-209412`.`oscreditrisk`.`accounts_history_advanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-16T19:19:26.006352Z", "completed_at": "2024-12-16T19:19:26.011829Z"}, {"name": "execute", "started_at": "2024-12-16T19:19:26.012445Z", "completed_at": "2024-12-16T19:19:27.534148Z"}], "thread_id": "Thread-1", "execution_time": 1.529344081878662, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "EU", "project_id": "steam-outlet-209412", "job_id": "a058c943-aacc-49c0-949e-adae4cafbf97", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.creditrisk.cohorts_advanced", "compiled": true, "compiled_code": "/*\n    This transformations is aggregating on a cohort level for visualisation.\n    It uses the advanced core dataset.\n    Produces information on linearized payments and with a term elapsed in % excluding downpayment.\n*/\n\nWITH accounts_history as (\n    SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`accounts_history_advanced`\n),\n\nperc_elapsed as (\n    SELECT \n        *,\n        SAFE_DIVIDE(reporting_day_excl_dp, nominal_term_excl_dp) as perc_term_elapsed,\n    FROM accounts_history\n),\n\napproximating as (\n    SELECT\n        *,\n        -- Flooring the perc paid to the next 5% (we could choose another grain)\n        FLOOR(perc_term_elapsed * 20) * 5 as perc_term_elapsed_approx,\n    FROM perc_elapsed\n),\n\ndownsampling as (\n    SELECT \n        * \n    FROM approximating\n    -- Optional : limit the time horizon to 200% of contractual term. Often sufficient.\n    WHERE perc_term_elapsed_approx <= 200\n    -- Ensure the dataset ends up with only one row per grain on % of contractual term\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY account_id, CAST(perc_term_elapsed_approx AS STRING) ORDER BY reporting_day_excl_dp) = 1\n),\n\ncounting_accounts as (\n  SELECT \n    *,\n    COUNT(account_id) OVER (PARTITION BY cohort_month, CAST(perc_term_elapsed_approx AS INT64)) as cnt_accounts,\n  FROM downsampling\n),\n\nfiltering as (\n    SELECT \n        *,\n    FROM counting_accounts\n    -- optional - removes the end of cohorts where calculation is not representative of the whole cohort. \n    -- We take 98% and not 100% as otherwise only a few outliers might prevent us from showing the cohort.\n    QUALIFY cnt_accounts >= 0.98 * MAX(cnt_accounts) OVER(PARTITION BY cohort_month) \n),\n\naggregating as (\n    SELECT \n        cohort_month,\n        perc_term_elapsed_approx,\n        SUM(paid_total_lin) / SUM(unlock_price - down_payment) as amount_paid_percent,\n    FROM filtering\n    GROUP BY ALL \n)\n\nSELECT * FROM aggregating", "relation_name": "`steam-outlet-209412`.`oscreditrisk`.`cohorts_advanced`"}], "elapsed_time": 55.8429811000824, "args": {"defer": false, "partial_parse_file_diff": true, "quiet": false, "log_level": "info", "invocation_command": "dbt run --select 1+cohorts_advanced", "show_resource_report": false, "empty": false, "log_level_file": "debug", "require_resource_names_without_spaces": false, "source_freshness_run_project_hooks": false, "partial_parse": true, "favor_state": false, "introspect": true, "exclude": [], "use_colors_file": true, "static_parser": true, "select": ["1+cohorts_advanced"], "log_format": "default", "send_anonymous_usage_stats": true, "version_check": true, "log_file_max_bytes": 10485760, "warn_error_options": {"include": [], "exclude": []}, "enable_legacy_logger": false, "cache_selected_only": false, "print": true, "vars": {}, "macro_debugging": false, "populate_cache": true, "indirect_selection": "eager", "strict_mode": false, "profiles_dir": "/Users/david/.dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "use_colors": true, "log_format_file": "debug", "which": "run", "project_dir": "/Users/david/bbplus-os-credit-risk/bbplus-os-credit-risk", "printer_width": 80, "log_path": "/Users/david/bbplus-os-credit-risk/bbplus-os-credit-risk/logs"}}