{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.8", "generated_at": "2024-12-16T18:48:04.108568Z", "invocation_id": "c5ecd43e-4a68-4ff9-8ea5-396cb019523a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-16T18:46:48.867093Z", "completed_at": "2024-12-16T18:46:48.876764Z"}, {"name": "execute", "started_at": "2024-12-16T18:46:48.877401Z", "completed_at": "2024-12-16T18:47:25.698563Z"}], "thread_id": "Thread-1", "execution_time": 36.8331298828125, "adapter_response": {"_message": "CREATE TABLE (3.4m rows, 6.2 MiB processed)", "code": "CREATE TABLE", "rows_affected": 3352042, "bytes_processed": 6526610, "bytes_billed": 20971520, "location": "EU", "project_id": "steam-outlet-209412", "job_id": "cd4c576c-35e4-4b6f-a62d-923dd7fd4460", "slot_ms": 2091487}, "message": "CREATE TABLE (3.4m rows, 6.2 MiB processed)", "failures": null, "unique_id": "model.creditrisk.accounts_history_beginner", "compiled": true, "compiled_code": "/*\n    This transformations is generating the first version of the core dataset (beginner version). \n    It is essentially : \n    - Joining the accounts dataset with a date spine for the target granuarity\n    - Grouping the payment by day, and joining them to the accounts history\n    - Calculating cumulated sums to describe the cumulated amount paid, and a few other useful fields\n*/\n\n\n\nWITH accounts as (\n  SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`cleaned_accounts`\n),\n\npayments as (\n  SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`cleaned_payments`\n),\n\ndate_spine as (\n  SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`date_spine`\n),\n\naccounts_with_spine as (\n  SELECT \n    *,\n    TIMESTAMP_DIFF(reporting_date, registration_date, DAY) + 1 as reporting_day,\n  FROM accounts\n  LEFT JOIN date_spine\n  ON accounts.registration_date <= date_spine.reporting_date\n),\n\npayments_grouped_by_day as (\n  SELECT \n    account_id,\n    \n    DATE_ADD(\n      DATE_TRUNC(payment_effective_date, DAY), \n      INTERVAL 1 DAY\n    ) as reporting_date,\n\n    SUM(amount) as amount,\n    SUM(\n      IF(not down_payment, amount, 0)\n    ) as amount_excl_dp,\n\n  FROM payments\n  GROUP BY ALL\n),\n\njoint as (\n  SELECT \n    * EXCEPT(amount, amount_excl_dp),\n    COALESCE(amount,          0) as amount,\n    COALESCE(amount_excl_dp,  0) as amount_excl_dp,\n  FROM accounts_with_spine \n  LEFT JOIN payments_grouped_by_day \n  USING(account_id, reporting_date)\n),\n\ncalc_paid_total as (\n  SELECT \n    *,\n    SUM(amount)         OVER(PARTITION BY account_id ORDER BY reporting_day ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as paid_total,\n    SUM(amount_excl_dp) OVER(PARTITION BY account_id ORDER BY reporting_day ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as paid_total_excl_dp,\n    \n    SAFE_DIVIDE(unlock_price - down_payment, daily_rate) + down_payment_days_included as nominal_term,\n    SAFE_DIVIDE(unlock_price - down_payment, daily_rate)                              as nominal_term_excl_dp,\n  FROM joint\n)\n\nSELECT * FROM calc_paid_total", "relation_name": "`steam-outlet-209412`.`oscreditrisk`.`accounts_history_beginner`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-16T18:47:25.707617Z", "completed_at": "2024-12-16T18:47:25.715163Z"}, {"name": "execute", "started_at": "2024-12-16T18:47:25.716301Z", "completed_at": "2024-12-16T18:48:04.101905Z"}], "thread_id": "Thread-1", "execution_time": 38.39591383934021, "adapter_response": {"_message": "CREATE TABLE (3.4m rows, 358.0 MiB processed)", "code": "CREATE TABLE", "rows_affected": 3352042, "bytes_processed": 375428704, "bytes_billed": 376438784, "location": "EU", "project_id": "steam-outlet-209412", "job_id": "db13cf95-c856-4770-946c-07bc0ab08bf7", "slot_ms": 4125658}, "message": "CREATE TABLE (3.4m rows, 358.0 MiB processed)", "failures": null, "unique_id": "model.creditrisk.accounts_history_advanced", "compiled": true, "compiled_code": "/*\n    This transformations is generating the second version of the core dataset (advanced version)\n    The main complexity lies in the fact that SQL is not sufficient to calculate the linearized payments. \n    We thus need to use a User Defined Function (here in Javascript) - but we could also use another programming language. \n*/\n\n\n\nWITH accounts_history as (\n    SELECT * FROM `steam-outlet-209412`.`oscreditrisk`.`accounts_history_beginner`\n),\n\nadditional_kpis as (\n    SELECT \n        *,\n        \n        CASE \n            WHEN reporting_day <= down_payment_days_included THEN Null\n            WHEN reporting_day = down_payment_days_included + 1 THEN paid_total\n            ELSE amount_excl_dp\n        END as amount_excl_dp_period, -- This step is necessary to 'record' payments at the end of the downpayment period.\n\n        CASE  \n            WHEN reporting_day < down_payment_days_included THEN Null\n            WHEN reporting_day >= down_payment_days_included THEN reporting_day - down_payment_days_included\n        END as reporting_day_excl_dp, -- Necessary to remove the downpayment period from analyses\n\n        GREATEST(\n            0,\n            MAX(reporting_day - down_payment_days_included) OVER(PARTITION BY account_id)\n         ) as account_age_excl_dp_in_days,\n\n    FROM accounts_history\n),\n\n-- Preparing the data for the UDF (consuming arrays)\nprepared_for_udf as (\n    SELECT\n        account_id,\n        ARRAY_AGG(COALESCE(amount_excl_dp_period, 0)     ORDER BY reporting_day) as payment_amounts,\n        ARRAY_AGG(daily_rate                             ORDER BY reporting_day) as daily_rates,\n        ARRAY_AGG(CAST(DATE(reporting_date) as STRING)   ORDER BY reporting_day) as casted_reporting_dates,\n    FROM additional_kpis\n    GROUP BY ALL\n),\n\n-- applying the UDF on prepared data format\napply_udf AS (\n    SELECT \n        *,\n        oscreditrisk.payment_linearization(\n        prepared_for_udf.payment_amounts, \n        prepared_for_udf.daily_rates, \n        prepared_for_udf.casted_reporting_dates\n        ) as payment_amount_lin_excl_dp\n    FROM prepared_for_udf\n),\n\n-- Expanding the results before joining them back\nexpand_udf_result AS (\n    SELECT\n        account_id,\n        CAST(reporting_date AS TIMESTAMP) as reporting_date,\n        amount_lin\n    FROM\n        apply_udf,\n        UNNEST(apply_udf.casted_reporting_dates)            AS reporting_date   WITH OFFSET AS pos\n    JOIN UNNEST(apply_udf.payment_amount_lin_excl_dp)     AS amount_lin       WITH OFFSET AS val_pos\n    ON pos = val_pos\n),\n\njoin_back_on_dataset as (\n    SELECT \n        *,\n        SUM(amount_lin) OVER(PARTITION BY account_id ORDER BY reporting_day ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as paid_total_lin,\n        IF(\n            amount_lin = 0 AND LAG(amount_lin) OVER(PARTITION BY account_id ORDER BY reporting_day) > 0,\n            reporting_date,\n            Null\n        ) as last_disablement,\n    FROM additional_kpis \n    LEFT JOIN expand_udf_result USING(account_id, reporting_date)\n),\n\nfinal_kpis as (\n  SELECT \n    *,\n    CASE \n        WHEN reporting_day <= down_payment_days_included THEN 'ENABLED'\n        WHEN paid_total >= unlock_price THEN 'UNLOCKED'\n        WHEN amount_lin > 0   THEN 'ENABLED'\n        WHEN amount_lin <= 0  THEN 'DISABLED'\n    END as reporting_date_status,\n    CASE \n        WHEN amount_lin = 0 \n        THEN DATE_DIFF(\n            reporting_date, \n            LAST_VALUE(last_disablement IGNORE NULLS) OVER(PARTITION BY account_id ORDER BY reporting_day),\n            DAY\n        ) \n    END as days_disabled,\n  FROM join_back_on_dataset\n)\n\nSELECT * FROM final_kpis", "relation_name": "`steam-outlet-209412`.`oscreditrisk`.`accounts_history_advanced`"}], "elapsed_time": 81.53152108192444, "args": {"select": ["1+accounts_history_advanced"], "strict_mode": false, "enable_legacy_logger": false, "use_colors_file": true, "log_format": "default", "empty": false, "which": "run", "partial_parse_file_diff": true, "printer_width": 80, "exclude": [], "print": true, "show_resource_report": false, "invocation_command": "dbt run --select 1+accounts_history_advanced", "write_json": true, "version_check": true, "log_level": "info", "quiet": false, "log_path": "/Users/david/bbplus-os-credit-risk/bbplus-os-credit-risk/logs", "require_resource_names_without_spaces": false, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "use_colors": true, "introspect": true, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "profiles_dir": "/Users/david/.dbt", "log_level_file": "debug", "populate_cache": true, "log_format_file": "debug", "partial_parse": true, "static_parser": true, "favor_state": false, "source_freshness_run_project_hooks": false, "project_dir": "/Users/david/bbplus-os-credit-risk/bbplus-os-credit-risk", "cache_selected_only": false, "require_explicit_package_overrides_for_builtin_materializations": true, "macro_debugging": false, "defer": false}}